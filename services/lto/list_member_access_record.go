package lto

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListMemberAccessRecord invokes the lto.ListMemberAccessRecord API synchronously
func (client *Client) ListMemberAccessRecord(request *ListMemberAccessRecordRequest) (response *ListMemberAccessRecordResponse, err error) {
	response = CreateListMemberAccessRecordResponse()
	err = client.DoAction(request, response)
	return
}

// ListMemberAccessRecordWithChan invokes the lto.ListMemberAccessRecord API asynchronously
func (client *Client) ListMemberAccessRecordWithChan(request *ListMemberAccessRecordRequest) (<-chan *ListMemberAccessRecordResponse, <-chan error) {
	responseChan := make(chan *ListMemberAccessRecordResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListMemberAccessRecord(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListMemberAccessRecordWithCallback invokes the lto.ListMemberAccessRecord API asynchronously
func (client *Client) ListMemberAccessRecordWithCallback(request *ListMemberAccessRecordRequest, callback func(response *ListMemberAccessRecordResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListMemberAccessRecordResponse
		var err error
		defer close(result)
		response, err = client.ListMemberAccessRecord(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListMemberAccessRecordRequest is the request struct for api ListMemberAccessRecord
type ListMemberAccessRecordRequest struct {
	*requests.RpcRequest
	Num          requests.Integer `position:"Query" name:"Num"`
	Uid          string           `position:"Query" name:"Uid"`
	Size         requests.Integer `position:"Query" name:"Size"`
	Name         string           `position:"Query" name:"Name"`
	Contactor    string           `position:"Query" name:"Contactor"`
	AccessStatus string           `position:"Query" name:"AccessStatus"`
}

// ListMemberAccessRecordResponse is the response struct for api ListMemberAccessRecord
type ListMemberAccessRecordResponse struct {
	*responses.BaseResponse
	Code           string                       `json:"Code" xml:"Code"`
	HttpStatusCode int                          `json:"HttpStatusCode" xml:"HttpStatusCode"`
	Message        string                       `json:"Message" xml:"Message"`
	RequestId      string                       `json:"RequestId" xml:"RequestId"`
	Success        bool                         `json:"Success" xml:"Success"`
	Data           DataInListMemberAccessRecord `json:"Data" xml:"Data"`
}

// CreateListMemberAccessRecordRequest creates a request to invoke ListMemberAccessRecord API
func CreateListMemberAccessRecordRequest() (request *ListMemberAccessRecordRequest) {
	request = &ListMemberAccessRecordRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("lto", "2021-07-07", "ListMemberAccessRecord", "", "")
	request.Method = requests.POST
	return
}

// CreateListMemberAccessRecordResponse creates a response to parse from ListMemberAccessRecord response
func CreateListMemberAccessRecordResponse() (response *ListMemberAccessRecordResponse) {
	response = &ListMemberAccessRecordResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
