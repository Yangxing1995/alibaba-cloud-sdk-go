package ehpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListServerlessJobs invokes the ehpc.ListServerlessJobs API synchronously
func (client *Client) ListServerlessJobs(request *ListServerlessJobsRequest) (response *ListServerlessJobsResponse, err error) {
	response = CreateListServerlessJobsResponse()
	err = client.DoAction(request, response)
	return
}

// ListServerlessJobsWithChan invokes the ehpc.ListServerlessJobs API asynchronously
func (client *Client) ListServerlessJobsWithChan(request *ListServerlessJobsRequest) (<-chan *ListServerlessJobsResponse, <-chan error) {
	responseChan := make(chan *ListServerlessJobsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListServerlessJobs(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListServerlessJobsWithCallback invokes the ehpc.ListServerlessJobs API asynchronously
func (client *Client) ListServerlessJobsWithCallback(request *ListServerlessJobsRequest, callback func(response *ListServerlessJobsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListServerlessJobsResponse
		var err error
		defer close(result)
		response, err = client.ListServerlessJobs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListServerlessJobsRequest is the request struct for api ListServerlessJobs
type ListServerlessJobsRequest struct {
	*requests.RpcRequest
	SubmitTimeStart string           `position:"Query" name:"SubmitTimeStart"`
	PageNumber      requests.Integer `position:"Query" name:"PageNumber"`
	PageSize        requests.Integer `position:"Query" name:"PageSize"`
	State           string           `position:"Query" name:"State"`
	SubmitOrder     string           `position:"Query" name:"SubmitOrder"`
	ClusterId       string           `position:"Query" name:"ClusterId"`
	JobNames        *[]string        `position:"Query" name:"JobNames"  type:"Repeated"`
	Users           *[]string        `position:"Query" name:"Users"  type:"Repeated"`
	StartOrder      string           `position:"Query" name:"StartOrder"`
	SubmitTimeEnd   string           `position:"Query" name:"SubmitTimeEnd"`
	Queues          *[]string        `position:"Query" name:"Queues"  type:"Repeated"`
	JobIds          *[]string        `position:"Query" name:"JobIds"  type:"Repeated"`
}

// ListServerlessJobsResponse is the response struct for api ListServerlessJobs
type ListServerlessJobsResponse struct {
	*responses.BaseResponse
	TotalCount int                           `json:"TotalCount" xml:"TotalCount"`
	RequestId  string                        `json:"RequestId" xml:"RequestId"`
	PageSize   int64                         `json:"PageSize" xml:"PageSize"`
	PageNumber int64                         `json:"PageNumber" xml:"PageNumber"`
	Jobs       []JobInfoInListServerlessJobs `json:"Jobs" xml:"Jobs"`
}

// CreateListServerlessJobsRequest creates a request to invoke ListServerlessJobs API
func CreateListServerlessJobsRequest() (request *ListServerlessJobsRequest) {
	request = &ListServerlessJobsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EHPC", "2018-04-12", "ListServerlessJobs", "ehs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListServerlessJobsResponse creates a response to parse from ListServerlessJobs response
func CreateListServerlessJobsResponse() (response *ListServerlessJobsResponse) {
	response = &ListServerlessJobsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
