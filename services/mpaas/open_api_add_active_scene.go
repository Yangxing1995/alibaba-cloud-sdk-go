package mpaas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OpenApiAddActiveScene invokes the mpaas.OpenApiAddActiveScene API synchronously
func (client *Client) OpenApiAddActiveScene(request *OpenApiAddActiveSceneRequest) (response *OpenApiAddActiveSceneResponse, err error) {
	response = CreateOpenApiAddActiveSceneResponse()
	err = client.DoAction(request, response)
	return
}

// OpenApiAddActiveSceneWithChan invokes the mpaas.OpenApiAddActiveScene API asynchronously
func (client *Client) OpenApiAddActiveSceneWithChan(request *OpenApiAddActiveSceneRequest) (<-chan *OpenApiAddActiveSceneResponse, <-chan error) {
	responseChan := make(chan *OpenApiAddActiveSceneResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OpenApiAddActiveScene(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OpenApiAddActiveSceneWithCallback invokes the mpaas.OpenApiAddActiveScene API asynchronously
func (client *Client) OpenApiAddActiveSceneWithCallback(request *OpenApiAddActiveSceneRequest, callback func(response *OpenApiAddActiveSceneResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OpenApiAddActiveSceneResponse
		var err error
		defer close(result)
		response, err = client.OpenApiAddActiveScene(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OpenApiAddActiveSceneRequest is the request struct for api OpenApiAddActiveScene
type OpenApiAddActiveSceneRequest struct {
	*requests.RpcRequest
	MpaasMqcpOpenApiAddActiveSceneReqJsonStr string `position:"Body" name:"MpaasMqcpOpenApiAddActiveSceneReqJsonStr"`
	TenantId                                 string `position:"Body" name:"TenantId"`
	AppId                                    string `position:"Body" name:"AppId"`
	WorkspaceId                              string `position:"Body" name:"WorkspaceId"`
}

// OpenApiAddActiveSceneResponse is the response struct for api OpenApiAddActiveScene
type OpenApiAddActiveSceneResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId" xml:"RequestId"`
	ResultCode    string `json:"ResultCode" xml:"ResultCode"`
	ResultContent string `json:"ResultContent" xml:"ResultContent"`
}

// CreateOpenApiAddActiveSceneRequest creates a request to invoke OpenApiAddActiveScene API
func CreateOpenApiAddActiveSceneRequest() (request *OpenApiAddActiveSceneRequest) {
	request = &OpenApiAddActiveSceneRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("mPaaS", "2020-10-28", "OpenApiAddActiveScene", "", "")
	request.Method = requests.POST
	return
}

// CreateOpenApiAddActiveSceneResponse creates a response to parse from OpenApiAddActiveScene response
func CreateOpenApiAddActiveSceneResponse() (response *OpenApiAddActiveSceneResponse) {
	response = &OpenApiAddActiveSceneResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
