package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryContactTemplate invokes the domain.QueryContactTemplate API synchronously
func (client *Client) QueryContactTemplate(request *QueryContactTemplateRequest) (response *QueryContactTemplateResponse, err error) {
	response = CreateQueryContactTemplateResponse()
	err = client.DoAction(request, response)
	return
}

// QueryContactTemplateWithChan invokes the domain.QueryContactTemplate API asynchronously
func (client *Client) QueryContactTemplateWithChan(request *QueryContactTemplateRequest) (<-chan *QueryContactTemplateResponse, <-chan error) {
	responseChan := make(chan *QueryContactTemplateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryContactTemplate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryContactTemplateWithCallback invokes the domain.QueryContactTemplate API asynchronously
func (client *Client) QueryContactTemplateWithCallback(request *QueryContactTemplateRequest, callback func(response *QueryContactTemplateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryContactTemplateResponse
		var err error
		defer close(result)
		response, err = client.QueryContactTemplate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryContactTemplateRequest is the request struct for api QueryContactTemplate
type QueryContactTemplateRequest struct {
	*requests.RpcRequest
	CCompany          string           `position:"Query" name:"CCompany"`
	DefaultTemplate   requests.Boolean `position:"Query" name:"DefaultTemplate"`
	ECompany          string           `position:"Query" name:"ECompany"`
	PageNum           requests.Integer `position:"Query" name:"PageNum"`
	RegType           string           `position:"Query" name:"RegType"`
	PageSize          requests.Integer `position:"Query" name:"PageSize"`
	Lang              string           `position:"Query" name:"Lang"`
	ContactTemplateId requests.Integer `position:"Query" name:"ContactTemplateId"`
	AuditStatus       string           `position:"Query" name:"AuditStatus"`
	UserClientIp      string           `position:"Query" name:"UserClientIp"`
}

// QueryContactTemplateResponse is the response struct for api QueryContactTemplate
type QueryContactTemplateResponse struct {
	*responses.BaseResponse
	PrePage          bool             `json:"PrePage" xml:"PrePage"`
	CurrentPageNum   int              `json:"CurrentPageNum" xml:"CurrentPageNum"`
	RequestId        string           `json:"RequestId" xml:"RequestId"`
	PageSize         int              `json:"PageSize" xml:"PageSize"`
	TotalPageNum     int              `json:"TotalPageNum" xml:"TotalPageNum"`
	TotalItemNum     int              `json:"TotalItemNum" xml:"TotalItemNum"`
	NextPage         bool             `json:"NextPage" xml:"NextPage"`
	ContactTemplates ContactTemplates `json:"ContactTemplates" xml:"ContactTemplates"`
}

// CreateQueryContactTemplateRequest creates a request to invoke QueryContactTemplate API
func CreateQueryContactTemplateRequest() (request *QueryContactTemplateRequest) {
	request = &QueryContactTemplateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryContactTemplate", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateQueryContactTemplateResponse creates a response to parse from QueryContactTemplate response
func CreateQueryContactTemplateResponse() (response *QueryContactTemplateResponse) {
	response = &QueryContactTemplateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
