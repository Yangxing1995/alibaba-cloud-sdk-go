package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryDomainBySaleId invokes the domain.QueryDomainBySaleId API synchronously
func (client *Client) QueryDomainBySaleId(request *QueryDomainBySaleIdRequest) (response *QueryDomainBySaleIdResponse, err error) {
	response = CreateQueryDomainBySaleIdResponse()
	err = client.DoAction(request, response)
	return
}

// QueryDomainBySaleIdWithChan invokes the domain.QueryDomainBySaleId API asynchronously
func (client *Client) QueryDomainBySaleIdWithChan(request *QueryDomainBySaleIdRequest) (<-chan *QueryDomainBySaleIdResponse, <-chan error) {
	responseChan := make(chan *QueryDomainBySaleIdResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryDomainBySaleId(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryDomainBySaleIdWithCallback invokes the domain.QueryDomainBySaleId API asynchronously
func (client *Client) QueryDomainBySaleIdWithCallback(request *QueryDomainBySaleIdRequest, callback func(response *QueryDomainBySaleIdResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryDomainBySaleIdResponse
		var err error
		defer close(result)
		response, err = client.QueryDomainBySaleId(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryDomainBySaleIdRequest is the request struct for api QueryDomainBySaleId
type QueryDomainBySaleIdRequest struct {
	*requests.RpcRequest
	SaleId       string `position:"Query" name:"SaleId"`
	UserClientIp string `position:"Query" name:"UserClientIp"`
	Lang         string `position:"Query" name:"Lang"`
}

// QueryDomainBySaleIdResponse is the response struct for api QueryDomainBySaleId
type QueryDomainBySaleIdResponse struct {
	*responses.BaseResponse
	ChineseHolder               string  `json:"ChineseHolder" xml:"ChineseHolder"`
	CreationDate                string  `json:"CreationDate" xml:"CreationDate"`
	DomainName                  string  `json:"DomainName" xml:"DomainName"`
	SaleId                      string  `json:"SaleId" xml:"SaleId"`
	Premium                     bool    `json:"Premium" xml:"Premium"`
	HolderEmail                 string  `json:"HolderEmail" xml:"HolderEmail"`
	DomainRegType               string  `json:"DomainRegType" xml:"DomainRegType"`
	EnglishHolder               string  `json:"EnglishHolder" xml:"EnglishHolder"`
	Remark                      string  `json:"Remark" xml:"Remark"`
	EnglishContactPerson        string  `json:"EnglishContactPerson" xml:"EnglishContactPerson"`
	TransferLock                string  `json:"TransferLock" xml:"TransferLock"`
	TransferOutStatus           string  `json:"TransferOutStatus" xml:"TransferOutStatus"`
	ExpirationDate              string  `json:"ExpirationDate" xml:"ExpirationDate"`
	UserId                      string  `json:"UserId" xml:"UserId"`
	SafetyLock                  string  `json:"SafetyLock" xml:"SafetyLock"`
	ChineseContactPerson        string  `json:"ChineseContactPerson" xml:"ChineseContactPerson"`
	EmailVerificationClientHold bool    `json:"EmailVerificationClientHold" xml:"EmailVerificationClientHold"`
	EmailVerificationStatus     int     `json:"EmailVerificationStatus" xml:"EmailVerificationStatus"`
	WhoisProtected              bool    `json:"WhoisProtected" xml:"WhoisProtected"`
	DnsList                     DnsList `json:"DnsList" xml:"DnsList"`
}

// CreateQueryDomainBySaleIdRequest creates a request to invoke QueryDomainBySaleId API
func CreateQueryDomainBySaleIdRequest() (request *QueryDomainBySaleIdRequest) {
	request = &QueryDomainBySaleIdRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryDomainBySaleId", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateQueryDomainBySaleIdResponse creates a response to parse from QueryDomainBySaleId response
func CreateQueryDomainBySaleIdResponse() (response *QueryDomainBySaleIdResponse) {
	response = &QueryDomainBySaleIdResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
