package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact invokes the domain.SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact API synchronously
func (client *Client) SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact(request *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest) (response *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse, err error) {
	response = CreateSaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse()
	err = client.DoAction(request, response)
	return
}

// SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactWithChan invokes the domain.SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact API asynchronously
func (client *Client) SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactWithChan(request *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest) (<-chan *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse, <-chan error) {
	responseChan := make(chan *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactWithCallback invokes the domain.SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact API asynchronously
func (client *Client) SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactWithCallback(request *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest, callback func(response *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse
		var err error
		defer close(result)
		response, err = client.SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest is the request struct for api SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact
type SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest struct {
	*requests.RpcRequest
	Country               string           `position:"Query" name:"Country"`
	City                  string           `position:"Query" name:"City"`
	TransferOutProhibited requests.Boolean `position:"Query" name:"TransferOutProhibited"`
	ZhCity                string           `position:"Query" name:"ZhCity"`
	TelExt                string           `position:"Query" name:"TelExt"`
	Province              string           `position:"Query" name:"Province"`
	PostalCode            string           `position:"Query" name:"PostalCode"`
	Lang                  string           `position:"Query" name:"Lang"`
	Email                 string           `position:"Query" name:"Email"`
	Address               string           `position:"Query" name:"Address"`
	TelArea               string           `position:"Query" name:"TelArea"`
	ContactType           string           `position:"Query" name:"ContactType"`
	ZhAddress             string           `position:"Query" name:"ZhAddress"`
	RegistrantType        string           `position:"Query" name:"RegistrantType"`
	DomainName            *[]string        `position:"Query" name:"DomainName"  type:"Repeated"`
	Telephone             string           `position:"Query" name:"Telephone"`
	ZhProvince            string           `position:"Query" name:"ZhProvince"`
	UserClientIp          string           `position:"Query" name:"UserClientIp"`
}

// SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse is the response struct for api SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact
type SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	TaskNo    string `json:"TaskNo" xml:"TaskNo"`
}

// CreateSaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest creates a request to invoke SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact API
func CreateSaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest() (request *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest) {
	request = &SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2018-1-24", "SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateSaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse creates a response to parse from SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContact response
func CreateSaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse() (response *SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse) {
	response = &SaveBatchTaskForUpdatingRegistrantExceptOrgByNewContactResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
