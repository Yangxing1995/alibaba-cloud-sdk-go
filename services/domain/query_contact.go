package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryContact invokes the domain.QueryContact API synchronously
func (client *Client) QueryContact(request *QueryContactRequest) (response *QueryContactResponse, err error) {
	response = CreateQueryContactResponse()
	err = client.DoAction(request, response)
	return
}

// QueryContactWithChan invokes the domain.QueryContact API asynchronously
func (client *Client) QueryContactWithChan(request *QueryContactRequest) (<-chan *QueryContactResponse, <-chan error) {
	responseChan := make(chan *QueryContactResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryContact(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryContactWithCallback invokes the domain.QueryContact API asynchronously
func (client *Client) QueryContactWithCallback(request *QueryContactRequest, callback func(response *QueryContactResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryContactResponse
		var err error
		defer close(result)
		response, err = client.QueryContact(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryContactRequest is the request struct for api QueryContact
type QueryContactRequest struct {
	*requests.RpcRequest
	ContactType  string `position:"Query" name:"ContactType"`
	DomainName   string `position:"Query" name:"DomainName"`
	UserClientIp string `position:"Query" name:"UserClientIp"`
	Lang         string `position:"Query" name:"Lang"`
}

// QueryContactResponse is the response struct for api QueryContact
type QueryContactResponse struct {
	*responses.BaseResponse
	CVenu      string `json:"CVenu" xml:"CVenu"`
	EName      string `json:"EName" xml:"EName"`
	Email      string `json:"Email" xml:"Email"`
	RequestId  string `json:"RequestId" xml:"RequestId"`
	RegType    string `json:"RegType" xml:"RegType"`
	EProvince  string `json:"EProvince" xml:"EProvince"`
	ECompany   string `json:"ECompany" xml:"ECompany"`
	PostalCode string `json:"PostalCode" xml:"PostalCode"`
	CCountry   string `json:"CCountry" xml:"CCountry"`
	CreateDate string `json:"CreateDate" xml:"CreateDate"`
	EVenu      string `json:"EVenu" xml:"EVenu"`
	TelMain    string `json:"TelMain" xml:"TelMain"`
	UpdateDate string `json:"UpdateDate" xml:"UpdateDate"`
	CCompany   string `json:"CCompany" xml:"CCompany"`
	CProvince  string `json:"CProvince" xml:"CProvince"`
	CName      string `json:"CName" xml:"CName"`
	ECity      string `json:"ECity" xml:"ECity"`
	CCity      string `json:"CCity" xml:"CCity"`
	TelExt     string `json:"TelExt" xml:"TelExt"`
	TelArea    string `json:"TelArea" xml:"TelArea"`
}

// CreateQueryContactRequest creates a request to invoke QueryContact API
func CreateQueryContactRequest() (request *QueryContactRequest) {
	request = &QueryContactRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryContact", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateQueryContactResponse creates a response to parse from QueryContact response
func CreateQueryContactResponse() (response *QueryContactResponse) {
	response = &QueryContactResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
