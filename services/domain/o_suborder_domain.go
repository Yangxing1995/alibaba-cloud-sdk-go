package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OSuborderDomain invokes the domain.OSuborderDomain API synchronously
func (client *Client) OSuborderDomain(request *OSuborderDomainRequest) (response *OSuborderDomainResponse, err error) {
	response = CreateOSuborderDomainResponse()
	err = client.DoAction(request, response)
	return
}

// OSuborderDomainWithChan invokes the domain.OSuborderDomain API asynchronously
func (client *Client) OSuborderDomainWithChan(request *OSuborderDomainRequest) (<-chan *OSuborderDomainResponse, <-chan error) {
	responseChan := make(chan *OSuborderDomainResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OSuborderDomain(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OSuborderDomainWithCallback invokes the domain.OSuborderDomain API asynchronously
func (client *Client) OSuborderDomainWithCallback(request *OSuborderDomainRequest, callback func(response *OSuborderDomainResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OSuborderDomainResponse
		var err error
		defer close(result)
		response, err = client.OSuborderDomain(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OSuborderDomainRequest is the request struct for api OSuborderDomain
type OSuborderDomainRequest struct {
	*requests.RpcRequest
	Type         string           `position:"Query" name:"type"`
	StartDate    string           `position:"Query" name:"startDate"`
	PageNum      requests.Integer `position:"Query" name:"pageNum"`
	EndDate      string           `position:"Query" name:"endDate"`
	PageSize     requests.Integer `position:"Query" name:"pageSize"`
	UserClientIp string           `position:"Query" name:"UserClientIp"`
	Lang         string           `position:"Query" name:"Lang"`
}

// OSuborderDomainResponse is the response struct for api OSuborderDomain
type OSuborderDomainResponse struct {
	*responses.BaseResponse
	RequestId      string                `json:"RequestId" xml:"RequestId"`
	TotalItemNum   int                   `json:"totalItemNum" xml:"totalItemNum"`
	PageSize       int                   `json:"pageSize" xml:"pageSize"`
	CurrentPageNum int                   `json:"currentPageNum" xml:"currentPageNum"`
	Data           DataInOSuborderDomain `json:"data" xml:"data"`
}

// CreateOSuborderDomainRequest creates a request to invoke OSuborderDomain API
func CreateOSuborderDomainRequest() (request *OSuborderDomainRequest) {
	request = &OSuborderDomainRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "OSuborderDomain", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateOSuborderDomainResponse creates a response to parse from OSuborderDomain response
func CreateOSuborderDomainResponse() (response *OSuborderDomainResponse) {
	response = &OSuborderDomainResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
