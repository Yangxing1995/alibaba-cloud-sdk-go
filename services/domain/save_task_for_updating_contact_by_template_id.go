package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SaveTaskForUpdatingContactByTemplateId invokes the domain.SaveTaskForUpdatingContactByTemplateId API synchronously
func (client *Client) SaveTaskForUpdatingContactByTemplateId(request *SaveTaskForUpdatingContactByTemplateIdRequest) (response *SaveTaskForUpdatingContactByTemplateIdResponse, err error) {
	response = CreateSaveTaskForUpdatingContactByTemplateIdResponse()
	err = client.DoAction(request, response)
	return
}

// SaveTaskForUpdatingContactByTemplateIdWithChan invokes the domain.SaveTaskForUpdatingContactByTemplateId API asynchronously
func (client *Client) SaveTaskForUpdatingContactByTemplateIdWithChan(request *SaveTaskForUpdatingContactByTemplateIdRequest) (<-chan *SaveTaskForUpdatingContactByTemplateIdResponse, <-chan error) {
	responseChan := make(chan *SaveTaskForUpdatingContactByTemplateIdResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SaveTaskForUpdatingContactByTemplateId(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SaveTaskForUpdatingContactByTemplateIdWithCallback invokes the domain.SaveTaskForUpdatingContactByTemplateId API asynchronously
func (client *Client) SaveTaskForUpdatingContactByTemplateIdWithCallback(request *SaveTaskForUpdatingContactByTemplateIdRequest, callback func(response *SaveTaskForUpdatingContactByTemplateIdResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SaveTaskForUpdatingContactByTemplateIdResponse
		var err error
		defer close(result)
		response, err = client.SaveTaskForUpdatingContactByTemplateId(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SaveTaskForUpdatingContactByTemplateIdRequest is the request struct for api SaveTaskForUpdatingContactByTemplateId
type SaveTaskForUpdatingContactByTemplateIdRequest struct {
	*requests.RpcRequest
	SaleId            string           `position:"Query" name:"SaleId"`
	ContactType       string           `position:"Query" name:"ContactType"`
	DomainName        string           `position:"Query" name:"DomainName"`
	AddTransferLock   requests.Boolean `position:"Query" name:"AddTransferLock"`
	UserClientIp      string           `position:"Query" name:"UserClientIp"`
	Lang              string           `position:"Query" name:"Lang"`
	ContactTemplateId requests.Integer `position:"Query" name:"ContactTemplateId"`
}

// SaveTaskForUpdatingContactByTemplateIdResponse is the response struct for api SaveTaskForUpdatingContactByTemplateId
type SaveTaskForUpdatingContactByTemplateIdResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	TaskNo    string `json:"TaskNo" xml:"TaskNo"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateSaveTaskForUpdatingContactByTemplateIdRequest creates a request to invoke SaveTaskForUpdatingContactByTemplateId API
func CreateSaveTaskForUpdatingContactByTemplateIdRequest() (request *SaveTaskForUpdatingContactByTemplateIdRequest) {
	request = &SaveTaskForUpdatingContactByTemplateIdRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "SaveTaskForUpdatingContactByTemplateId", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateSaveTaskForUpdatingContactByTemplateIdResponse creates a response to parse from SaveTaskForUpdatingContactByTemplateId response
func CreateSaveTaskForUpdatingContactByTemplateIdResponse() (response *SaveTaskForUpdatingContactByTemplateIdResponse) {
	response = &SaveTaskForUpdatingContactByTemplateIdResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
