package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetWhoisInfo invokes the domain.GetWhoisInfo API synchronously
func (client *Client) GetWhoisInfo(request *GetWhoisInfoRequest) (response *GetWhoisInfoResponse, err error) {
	response = CreateGetWhoisInfoResponse()
	err = client.DoAction(request, response)
	return
}

// GetWhoisInfoWithChan invokes the domain.GetWhoisInfo API asynchronously
func (client *Client) GetWhoisInfoWithChan(request *GetWhoisInfoRequest) (<-chan *GetWhoisInfoResponse, <-chan error) {
	responseChan := make(chan *GetWhoisInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetWhoisInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetWhoisInfoWithCallback invokes the domain.GetWhoisInfo API asynchronously
func (client *Client) GetWhoisInfoWithCallback(request *GetWhoisInfoRequest, callback func(response *GetWhoisInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetWhoisInfoResponse
		var err error
		defer close(result)
		response, err = client.GetWhoisInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetWhoisInfoRequest is the request struct for api GetWhoisInfo
type GetWhoisInfoRequest struct {
	*requests.RpcRequest
	DomainName string `position:"Query" name:"DomainName"`
}

// GetWhoisInfoResponse is the response struct for api GetWhoisInfo
type GetWhoisInfoResponse struct {
	*responses.BaseResponse
	CreationDate               string           `json:"CreationDate" xml:"CreationDate"`
	NameServerList             string           `json:"NameServerList" xml:"NameServerList"`
	AdminPhone                 string           `json:"AdminPhone" xml:"AdminPhone"`
	UpdatedDate                string           `json:"UpdatedDate" xml:"UpdatedDate"`
	RegistrantFaxExt           string           `json:"RegistrantFaxExt" xml:"RegistrantFaxExt"`
	RegistrarAbuseContactPhone string           `json:"RegistrarAbuseContactPhone" xml:"RegistrarAbuseContactPhone"`
	OriginalInfo               string           `json:"OriginalInfo" xml:"OriginalInfo"`
	RegistrantStreet           string           `json:"RegistrantStreet" xml:"RegistrantStreet"`
	AdminCity                  string           `json:"AdminCity" xml:"AdminCity"`
	TechFax                    string           `json:"TechFax" xml:"TechFax"`
	AdminPostalCode            string           `json:"AdminPostalCode" xml:"AdminPostalCode"`
	FormatUpdatedDate          string           `json:"FormatUpdatedDate" xml:"FormatUpdatedDate"`
	CacheUpdatedDate           string           `json:"CacheUpdatedDate" xml:"CacheUpdatedDate"`
	RegistrantStateProvince    string           `json:"RegistrantStateProvince" xml:"RegistrantStateProvince"`
	RegistrantFax              string           `json:"RegistrantFax" xml:"RegistrantFax"`
	RegistrantEmail            string           `json:"RegistrantEmail" xml:"RegistrantEmail"`
	RegistrantOrganization     string           `json:"RegistrantOrganization" xml:"RegistrantOrganization"`
	RegistryAdminID            string           `json:"RegistryAdminID" xml:"RegistryAdminID"`
	ReferralURL                string           `json:"ReferralURL" xml:"ReferralURL"`
	RequestId                  string           `json:"RequestId" xml:"RequestId"`
	DomainName                 string           `json:"DomainName" xml:"DomainName"`
	RegistrarURL               string           `json:"RegistrarURL" xml:"RegistrarURL"`
	TechFaxExt                 string           `json:"TechFaxExt" xml:"TechFaxExt"`
	RegistrantCountry          string           `json:"RegistrantCountry" xml:"RegistrantCountry"`
	RegistrantName             string           `json:"RegistrantName" xml:"RegistrantName"`
	TechStreet                 string           `json:"TechStreet" xml:"TechStreet"`
	RegistryDomainID           string           `json:"RegistryDomainID" xml:"RegistryDomainID"`
	TechPhone                  string           `json:"TechPhone" xml:"TechPhone"`
	AdminPhoneExt              string           `json:"AdminPhoneExt" xml:"AdminPhoneExt"`
	AdminCountry               string           `json:"AdminCountry" xml:"AdminCountry"`
	TechCity                   string           `json:"TechCity" xml:"TechCity"`
	RegistrantPhone            string           `json:"RegistrantPhone" xml:"RegistrantPhone"`
	RegistrarAbuseContactEmail string           `json:"RegistrarAbuseContactEmail" xml:"RegistrarAbuseContactEmail"`
	AdminStateProvince         string           `json:"AdminStateProvince" xml:"AdminStateProvince"`
	FormatCreationDate         string           `json:"FormatCreationDate" xml:"FormatCreationDate"`
	TechCountry                string           `json:"TechCountry" xml:"TechCountry"`
	StatusList                 string           `json:"StatusList" xml:"StatusList"`
	TechEmail                  string           `json:"TechEmail" xml:"TechEmail"`
	AdminEmail                 string           `json:"AdminEmail" xml:"AdminEmail"`
	RegistrarIANAID            string           `json:"RegistrarIANAID" xml:"RegistrarIANAID"`
	Registrar                  string           `json:"Registrar" xml:"Registrar"`
	RegistryTechID             string           `json:"RegistryTechID" xml:"RegistryTechID"`
	WhoisProtected             string           `json:"WhoisProtected" xml:"WhoisProtected"`
	AdminOrganization          string           `json:"AdminOrganization" xml:"AdminOrganization"`
	AdminName                  string           `json:"AdminName" xml:"AdminName"`
	TechName                   string           `json:"TechName" xml:"TechName"`
	TechPostalCode             string           `json:"TechPostalCode" xml:"TechPostalCode"`
	RegistrantCity             string           `json:"RegistrantCity" xml:"RegistrantCity"`
	TechPhoneExt               string           `json:"TechPhoneExt" xml:"TechPhoneExt"`
	TechStateProvince          string           `json:"TechStateProvince" xml:"TechStateProvince"`
	RegistrarWhoisServer       string           `json:"RegistrarWhoisServer" xml:"RegistrarWhoisServer"`
	RegistrantPhoneExt         string           `json:"RegistrantPhoneExt" xml:"RegistrantPhoneExt"`
	FormatExpirationDate       string           `json:"FormatExpirationDate" xml:"FormatExpirationDate"`
	RegistrantPostalCode       string           `json:"RegistrantPostalCode" xml:"RegistrantPostalCode"`
	ExpirationDate             string           `json:"ExpirationDate" xml:"ExpirationDate"`
	TechOrganization           string           `json:"TechOrganization" xml:"TechOrganization"`
	AdminStreet                string           `json:"AdminStreet" xml:"AdminStreet"`
	AdminFax                   string           `json:"AdminFax" xml:"AdminFax"`
	AdminFaxExt                string           `json:"AdminFaxExt" xml:"AdminFaxExt"`
	RegistryRegistrantId       string           `json:"RegistryRegistrantId" xml:"RegistryRegistrantId"`
	DomainStatusList           DomainStatusList `json:"DomainStatusList" xml:"DomainStatusList"`
}

// CreateGetWhoisInfoRequest creates a request to invoke GetWhoisInfo API
func CreateGetWhoisInfoRequest() (request *GetWhoisInfoRequest) {
	request = &GetWhoisInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "GetWhoisInfo", "domain", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetWhoisInfoResponse creates a response to parse from GetWhoisInfo response
func CreateGetWhoisInfoResponse() (response *GetWhoisInfoResponse) {
	response = &GetWhoisInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
