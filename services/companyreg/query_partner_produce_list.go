package companyreg

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryPartnerProduceList invokes the companyreg.QueryPartnerProduceList API synchronously
func (client *Client) QueryPartnerProduceList(request *QueryPartnerProduceListRequest) (response *QueryPartnerProduceListResponse, err error) {
	response = CreateQueryPartnerProduceListResponse()
	err = client.DoAction(request, response)
	return
}

// QueryPartnerProduceListWithChan invokes the companyreg.QueryPartnerProduceList API asynchronously
func (client *Client) QueryPartnerProduceListWithChan(request *QueryPartnerProduceListRequest) (<-chan *QueryPartnerProduceListResponse, <-chan error) {
	responseChan := make(chan *QueryPartnerProduceListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryPartnerProduceList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryPartnerProduceListWithCallback invokes the companyreg.QueryPartnerProduceList API asynchronously
func (client *Client) QueryPartnerProduceListWithCallback(request *QueryPartnerProduceListRequest, callback func(response *QueryPartnerProduceListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryPartnerProduceListResponse
		var err error
		defer close(result)
		response, err = client.QueryPartnerProduceList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryPartnerProduceListRequest is the request struct for api QueryPartnerProduceList
type QueryPartnerProduceListRequest struct {
	*requests.RpcRequest
	BizType  string           `position:"Query" name:"BizType"`
	BizId    string           `position:"Query" name:"BizId"`
	PageSize requests.Integer `position:"Query" name:"PageSize"`
	PageNum  requests.Integer `position:"Query" name:"PageNum"`
}

// QueryPartnerProduceListResponse is the response struct for api QueryPartnerProduceList
type QueryPartnerProduceListResponse struct {
	*responses.BaseResponse
	RequestId      string    `json:"RequestId" xml:"RequestId"`
	CurrentPageNum int64     `json:"CurrentPageNum" xml:"CurrentPageNum"`
	TotalPageNum   int64     `json:"TotalPageNum" xml:"TotalPageNum"`
	PageSize       int64     `json:"PageSize" xml:"PageSize"`
	TotalItemNum   int64     `json:"TotalItemNum" xml:"TotalItemNum"`
	Data           []Produce `json:"Data" xml:"Data"`
}

// CreateQueryPartnerProduceListRequest creates a request to invoke QueryPartnerProduceList API
func CreateQueryPartnerProduceListRequest() (request *QueryPartnerProduceListRequest) {
	request = &QueryPartnerProduceListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("companyreg", "2020-03-06", "QueryPartnerProduceList", "companyreg", "openAPI")
	request.Method = requests.GET
	return
}

// CreateQueryPartnerProduceListResponse creates a response to parse from QueryPartnerProduceList response
func CreateQueryPartnerProduceListResponse() (response *QueryPartnerProduceListResponse) {
	response = &QueryPartnerProduceListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
