package ens

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeWorkflow invokes the ens.DescribeWorkflow API synchronously
func (client *Client) DescribeWorkflow(request *DescribeWorkflowRequest) (response *DescribeWorkflowResponse, err error) {
	response = CreateDescribeWorkflowResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeWorkflowWithChan invokes the ens.DescribeWorkflow API asynchronously
func (client *Client) DescribeWorkflowWithChan(request *DescribeWorkflowRequest) (<-chan *DescribeWorkflowResponse, <-chan error) {
	responseChan := make(chan *DescribeWorkflowResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeWorkflow(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeWorkflowWithCallback invokes the ens.DescribeWorkflow API asynchronously
func (client *Client) DescribeWorkflowWithCallback(request *DescribeWorkflowRequest, callback func(response *DescribeWorkflowResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeWorkflowResponse
		var err error
		defer close(result)
		response, err = client.DescribeWorkflow(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeWorkflowRequest is the request struct for api DescribeWorkflow
type DescribeWorkflowRequest struct {
	*requests.RpcRequest
	PageNum      string `position:"Query" name:"PageNum"`
	StartDate    string `position:"Query" name:"StartDate"`
	EnsRegionId  string `position:"Query" name:"EnsRegionId"`
	Id           string `position:"Query" name:"Id"`
	WorkFlowId   string `position:"Query" name:"WorkFlowId"`
	BusinessId   string `position:"Query" name:"BusinessId"`
	InstanceId   string `position:"Query" name:"InstanceId"`
	EndDate      string `position:"Query" name:"EndDate"`
	Status       string `position:"Query" name:"Status"`
	WorkFlowName string `position:"Query" name:"WorkFlowName"`
	PageSize     string `position:"Query" name:"PageSize"`
	AliUid       string `position:"Query" name:"AliUid"`
}

// DescribeWorkflowResponse is the response struct for api DescribeWorkflow
type DescribeWorkflowResponse struct {
	*responses.BaseResponse
	RequestId    string          `json:"RequestId" xml:"RequestId"`
	WorkFlowInfo []WorkFlowInfos `json:"WorkFlowInfo" xml:"WorkFlowInfo"`
}

// CreateDescribeWorkflowRequest creates a request to invoke DescribeWorkflow API
func CreateDescribeWorkflowRequest() (request *DescribeWorkflowRequest) {
	request = &DescribeWorkflowRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ens", "2017-11-10", "DescribeWorkflow", "ens", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeWorkflowResponse creates a response to parse from DescribeWorkflow response
func CreateDescribeWorkflowResponse() (response *DescribeWorkflowResponse) {
	response = &DescribeWorkflowResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
